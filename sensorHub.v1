// ESP8266 Wireless Sensor Hub
// mostly pieced together from examples
// controls DHT22 sensor with temp & humidity, two DS waterproof temp probes, and a water pressure transducer
// interfaces with Blynk 

// V1.0 : Sends sensor data to blynk from DHT22, 2 DS temp probes, and 150 psi pressure transducer
// V1.1 : Added WifiManager, OTA upload, offline functionality of timers and automated reconnect

// ESP8266 VIRTUAL PIN MAP:
  // V0 = DHT22 probe, humidity
  // V1 = DHT22 probe, temperature
  // V2 = DS probe 1, temperature
  // V3 = DS probe 2, temperature 
  // V4 = water pressure transducer, psi

 // Bridged values
  // V19 = bridge widget
  // V20 = DHT22 probe, humidity
  // V21 = DHT22 probe, temperature
  // V22 = DS probe 1, temperature
  // V23 = DS probe 2, temperature 
  // V24 = water pressure transducer, psi


#include <ESP8266WiFi.h> // Needed for wifi on ESP8266
#include <ESP8266mDNS.h> // Needed for OTA upload
#include <ArduinoOTA.h>  // Needed for OTA upload
#include <WiFiManager.h> // Automated wifi config
#include <DNSServer.h> //Local DNS Server used for redirecting all requests to the configuration portal
#include <ESP8266WebServer.h> //Local WebServer used to serve the configuration portal

#include <BlynkSimpleEsp8266.h> // Blynk ESP8266

#include <DHT.h> // for DHT22 temp/humidity probe
#include <OneWire.h> // for DS temp probe
#include <DallasTemperature.h> // for DS temp probe


// Blynk auth code
char auth[] = "6a8e3ef4c8204f6b88b7bbecb8c75167";
// Blynk timer
BlynkTimer timer;

// WiFi credentials will be configured using WifiManager in setup()

// Frequency settings //
unsigned int myServerTimeout  =  3500;  //  3.5s server connection timeout (SCT)
unsigned int myWiFiTimeout    =  3200;  //  3.2s WiFi connection timeout   (WCT)
unsigned int blynkInterval    = 25000;  // 25.0s check server frequency    (CSF)
unsigned int sensorInterval =  2500;  //  2.5s function call frequency   (FCF)
// End Frequency settings //

// Bridge widget on virtual pin 19
WidgetBridge bridge1(V19);
// Bridge sensor values to the brain relay box
BLYNK_CONNECTED() {
 bridge1.setAuthToken("7fb8907ed38f4985a9e9771a01bab4ee"); // Auth code for "The brain" relay box
}

// DHT settings
#define DHTPIN D3 // DHT22 probe data wire is on pin D3
#define DHTTYPE DHT22     
DHT dht(DHTPIN, DHTTYPE);


// DS temp probe settings
#define ONE_WIRE_BUS D2 // DS probes data wire is on pin D2 
#define TEMPERATURE_PRECISION 9
// Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
OneWire oneWire(ONE_WIRE_BUS);
// Pass our oneWire reference to Dallas Temperature. 
DallasTemperature sensors(&oneWire);
// arrays to hold device addresses
DeviceAddress insideThermometer, outsideThermometer;

// Pressure transducer sensor settings
int sensorPin = A0;    // pressure transducer data wire is on pin A0
int pressureSensorValue ;  // variable to store the value coming from the sensor


 // function to 
void sendSensorData(){

  if(Blynk.connected()){

  //  function to Push DHT sensor data to Blynk //  
    // read humidity and temperature from dht
    float h1 = dht.readHumidity();
    float t1 = dht.readTemperature(true); // or dht.readTemperature(true) for Fahrenheit

    if (isnan(h1) || isnan(t1)) {
      Serial.println("Failed to read from DHT sensor!");
    } else {
        // send to blynk && bridge
        Blynk.virtualWrite(V0, h1); // V0 = DHT22 probe humidity
        Blynk.virtualWrite(V1, t1); // V1 = DHT22 probe temperature
        // bridge1.virtualWrite(V20, h1); // V20 = DHT22 probe humidity
        // delay(50);
        // bridge1.virtualWrite(V21, t1); // V21 = DHT22 probe temperature
        // delay(50);
    }


  // function to Push DS Sensor data to Blynk //
    // request to all sensors
    sensors.requestTemperatures();
    // error check 1
    if (!sensors.getAddress(insideThermometer, 0)) {
        Serial.println("Unable to find address for Device 1"); 
    } else {
    // set the resolution 
    sensors.setResolution(insideThermometer, TEMPERATURE_PRECISION);
    // get temperature
    float tempC1 = sensors.getTempC(insideThermometer);
    float tempF1 = DallasTemperature::toFahrenheit(tempC1);
    // send to blynk && bridge
    Blynk.virtualWrite(V2, tempF1); // V2 = DS probe 1 temperature
    //bridge1.virtualWrite(V22, tempF1); // V22 = DS probe 1 temperature
    }

    // error check 2
    if (!sensors.getAddress(outsideThermometer, 1)) {
        Serial.println("Unable to find address for Device 2"); 
    } else {
    // set the resolution 
    sensors.setResolution(outsideThermometer, TEMPERATURE_PRECISION);
    // get temperature
    float tempC2 = sensors.getTempC(outsideThermometer);
    float tempF2 = DallasTemperature::toFahrenheit(tempC2);
    // send to blynk && bridge
    Blynk.virtualWrite(V3, tempF2); // V3 = DS probe 2 temperature
    //bridge1.virtualWrite(V23, tempF2); // V23 = DS probe 2 temperature
    }



  // function to Push water pressure transducer sensor data to Blynk //
    // read the value from the sensor:
    pressureSensorValue = analogRead(sensorPin);
    //Serial.println(pressureSensorValue);
    //  error check
    if ( isnan(pressureSensorValue) or ( pressureSensorValue < 0 ) ) {
      Serial.println("Failed to read from water pressure transducer sensor!");
    } else {
        // Convert the analog reading (which goes from 0 - 1023) to a voltage (0 - 4.5V):
        //int voltage = pressureSensorValue * (4.5 / 1023.0);

        // Convert the calculated voltage to psi reading; 0.5v -> 0psi, 4.5v -> 150psi => voltage = (4/150)*psi + 0.5  => psi = (voltage - 0.5)*150 / 4
        //int psi = (voltage - 0.5) * 150 / 4;

        // convert to analog reading to psi using my empirically derived formula
          // this should work for 0 psi - 110 psi being read by A0 on D1 mini ESP8266 without an added resistor to make voltage divider.
        //int psi = ( 0.1238*pressureSensorValue - 18.294 );
          // this should work for 0 psi - 150 psi being read by A0 on D1 mini ESP8266 with added 180 kohm resistor in series with sensor voltage out to make voltage divider.
        int psi = ( 0.2*pressureSensorValue - 20 );


        // send to blynk && bridge
        Blynk.virtualWrite(V4, psi); // V4 = water pressure transducer psi
        bridge1.virtualWrite(V24, psi); // V24 = water pressure transducer psi
        Blynk.virtualWrite(V5, pressureSensorValue); // V4 = water pressure transducer psi
    }



  }
}


// function to check if connected to Blynk
void checkBlynk() {
  if (WiFi.status() == WL_CONNECTED)  
  {
    unsigned long startConnecting = millis();    
    while(!Blynk.connected()){
      Blynk.connect();  
      if(millis() > startConnecting + myServerTimeout){
        Serial.print("Unable to connect to server. ");
        break;
      }
    }
  }
  if (WiFi.status() != 3) {
    Serial.print("\tNo WiFi. ");
  } 
  Serial.printf("\tChecking again in %is.\n", blynkInterval / 1000);
  Serial.println(); 
}




void setup() {
  Serial.begin(115200);

  Serial.println("Booting");

  // Wifi Manager //
  unsigned long startWiFi = millis();
  WiFiManager wifiManager;
  wifiManager.autoConnect();
  // Check if wifi is connected
  Serial.println();
  if(WiFi.status() == 6){
    Serial.println("\tWiFi not connected yet.");
  }
  // If we aren't connected for this wrong, maybe something is wrong with router
  while (WiFi.status() != WL_CONNECTED){
    delay(500);
    if(millis() > startWiFi + myWiFiTimeout){
      Serial.println("\tCheck the WiFi router. ");
      break;
    }       
  }
  // End Wifi Manager //

  // Arduino OTA //
  Serial.println("Ready");
  ArduinoOTA.onStart([]() {
    Serial.println("Start OTA");
  });

  ArduinoOTA.onEnd([]() {
    Serial.println("End OTA");
  });

  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    Serial.printf("Progress: %u%%\n", (progress / (total / 100)));
  });

  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR) Serial.println("Auth Failed");
    else if (error == OTA_BEGIN_ERROR) Serial.println("Begin Failed");
    else if (error == OTA_CONNECT_ERROR) Serial.println("Connect Failed");
    else if (error == OTA_RECEIVE_ERROR) Serial.println("Receive Failed");
    else if (error == OTA_END_ERROR) Serial.println("End Failed");
  });

  ArduinoOTA.begin();

  Serial.println("Ready");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
  // End Arduino OTA //

  // Timers //
  timer.setInterval(blynkInterval, checkBlynk);   // check connection to server per blynkInterval
  timer.setInterval(sensorInterval, sendSensorData);// send sensor data every sensorInterval
  // End timers //

  // Blynk //
  Blynk.config(auth);
  checkBlynk();
  // End Blynk //

  // Sensors //

  // DHT probe
  dht.begin();

  // DS probes
  sensors.begin();

  // End Sensors //


}


void loop() {
  // Arduino OTA //
  ArduinoOTA.handle();
  // End Arduino OTA //

  // Blynk //
  if (Blynk.connected()) {Blynk.run();}
  timer.run();
  // End Blynk //

  // Other code

  // End  Other code //
}






